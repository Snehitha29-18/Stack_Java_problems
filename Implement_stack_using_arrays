class Stack {
    int n = 5;
    int[] arr = new int[n];    // Array to store stack elements
    int top = -1;      // Represents the top of the stack
    int capacity = n; // Max size of the stack
    // Push operation
    void push(int value) {
        if (isFull()) {
            System.out.println("Stack Overflow! Cannot push " + value);
            return;
        }
        top++;
        arr[top] = value;
        System.out.println(value + " pushed to stack");
    }
    // Pop operation
    int pop() {
        if (isEmpty()) {
            System.out.println("Stack Underflow! Cannot pop");
            return -1;
        }
        int x = arr[top];
        top--;
        return x;
    }
    // Peek operation
    int peek() {
        if (isEmpty()) {
            System.out.println("Stack is empty!");
            return -1;
        }
        return arr[top];
    }
    // Check if stack is empty
    boolean isEmpty() {
        return top == -1;
    }
    // Check if stack is full
    boolean isFull() {
        return top == capacity - 1;
    }
}
// Main class to test the stack implementation
public class Main {
    public static void main(String[] args) {
        Stack stack = new Stack();
        stack.push(10);
        stack.push(20);
        stack.push(30);
        System.out.println("Top element is: " + stack.peek());
        System.out.println("Popped: " + stack.pop());
        System.out.println("Popped: " + stack.pop());
        System.out.println("Is stack empty? " + stack.isEmpty());
    }
}
